library(pacman)
p_load(readxl, dplyr, ggplot2, tidyr)
dat <- read_excel('IST687 Data.xlsx')
str(dat)
summary(dat)
head(dat)
#Column names need to be changed to better understand the data.
colnames(dat)
names <- c("person_id", "credit_score", "loan_application_date", "requested_loan_term", "requested_loan_amount",
"preapproved_loan_amount", "preapproved_loan_term",  "person_birthdate", "person_marital_status", "person_gender",
"person_degree_type_desc", "person_employment_type_desc", "industry", "estimated_net_income", "actual_net_income",
"monthly_debt_capacity", "decision_status", "loan_disbursement_date", "first_repayment_date", "loan_amount",
"approved_loan_rate", "approved_nominal_rate", "approved_interest_amount")
colnames(dat) <- names
colnames(dat)
str(dat)
#Load the required packages
require(pacman)
p_load(readxl, dplyr, ggplot2, tidyr, lubridate)
dat$loan_application_month <- month(dat$loan_application_date)
dat$loan_disbursement_month <- month(dat$loan_disbursement_date)
head(dat)
str(dat)
#We'll also calculate the age and bin them in groups of ten years.
dat <- dat %>% mutate(age = system.time() - person_birthdate)
#We'll also calculate the age and bin them in groups of ten years.
dat <- dat %>% mutate(age = date() - person_birthdate)
#We'll also calculate the age and bin them in groups of ten years.
dat <- dat %>% mutate(age = Sys.Date() - person_birthdate)
#We'll also calculate the age and bin them in groups of ten years.
dat <- dat %>% mutate(age = Sys.Date() - as.Date(person_birthdate))
str(dat)
#We'll also calculate the age and bin them in groups of ten years.
dat <- dat %>% mutate(age = (Sys.Date() - as.Date(person_birthdate))/365,
age_bins = cut(age, breaks = c(21, 31, 41, 51, 61, 71, 81, 91),
labels = c('21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100')))
#We'll also calculate the age and bin them in groups of ten years.
dat <- dat %>% mutate(age = as.numeric((Sys.Date() - as.Date(person_birthdate))/365),
age_bins = cut(age, breaks = c(21, 31, 41, 51, 61, 71, 81, 91),
labels = c('21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100')))
#We'll also calculate the age and bin them in groups of ten years.
dat <- dat %>% mutate(age = as.numeric((Sys.Date() - as.Date(person_birthdate))/365),
age_bins = cut(age, breaks = c(21, 31, 41, 51, 61, 71, 81),
labels = c('21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100')))
#We'll also calculate the age and bin them in groups of ten years.
dat <- dat %>% mutate(age = as.numeric((Sys.Date() - as.Date(person_birthdate))/365),
age_bins = cut(age, breaks = c(21, 31, 41, 51, 61, 71, 81, 91),
labels = c('21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90')))
dat
str(dat)
View(dat)
View(dat)
#We'll also calculate the age and bin them in groups of ten years.
dat <- dat %>% mutate(age = as.numeric((Sys.Date() - as.Date(person_birthdate))/365),
age_bins = as.character(cut(age, breaks = c(21, 31, 41, 51, 61, 71, 81, 91),
labels = c('21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90'))))
head(dat)
#Demographic distributions
ggplot(dat, aes(x = person_gender, y = count(person_id))) + geom_bar(stat = 'identity')
#Demographic distributions
ggplot(dat, aes(x = person_gender)) + geom_bar(stat = 'identity')
#Demographic distributions
ggplot(dat, aes(x = person_gender, y = person_id)) + geom_bar(stat = 'identity')
#Demographic distributions
ggplot(dat, aes(x = person_gender, y = unique(person_id))) + geom_bar(stat = 'identity')
#Demographic distributions
ggplot(dat, aes(x = person_gender, y = person_id)) + geom_bar(stat = 'count')
#Demographic distributions
ggplot(dat, aes(person_gender)) + geom_bar()
#Demographic distributions
ggplot(dat, aes(month, fill = as.factor(person_gender))) + geom_bar(position = 'stack')
#Demographic distributions
ggplot(dat, aes(loan_application_month, fill = as.factor(person_gender))) + geom_bar(position = 'stack')
str(dat)
#Demographic distributions
ggplot(dat, aes(loan_application_date,
fill = as.factor(person_gender))) + geom_bar(position = 'stack')
#Demographic distributions
ggplot(dat, aes(month(loan_application_date),
fill = as.factor(person_gender))) + geom_bar(position = 'stack')
#Create month variable to better bin the data for month-to-month analysis.
dat$loan_application_code_month <- paste0(year(dat$loan_application_date), month(dat$loan_application_date))
dat$loan_disbursement_code_month <- paste0(year(dat$loan_disbursement_date), month(dat$loan_disbursement_date))
#Demographic distributions
ggplot(dat, aes(month(loan_application_code_month),
fill = as.factor(person_gender))) + geom_bar(position = 'stack')
str(dat)
#Create month variable to better bin the data for month-to-month analysis.
dat$loan_application_code_month <- paste0(year(dat$loan_application_date), month(dat$loan_application_date, '%M'))
?month
#Create month variable to better bin the data for month-to-month analysis.
dat$loan_application_code_month <- ifelse(length(month(dat$loan_application_date)) == 1,
paste0(year(dat$loan_application_date), 0, month(dat$loan_application_date)),
paste0(year(dat$loan_application_date), month(dat$loan_application_date)))
#Demographic distributions
ggplot(dat, aes(month(loan_application_code_month),
fill = as.factor(person_gender))) + geom_bar(position = 'stack')
#Demographic distributions
ggplot(dat, aes(loan_application_code_month,
fill = as.factor(person_gender))) + geom_bar(position = 'stack')
View(dat)
#We'll also calculate the age and bin them in groups of ten years.
dat <- dat %>% mutate(age = as.numeric((Sys.Date() - as.Date(person_birthdate))/365),
age_bins = as.character(cut(age, breaks = c(21, 31, 41, 51, 61, 71, 81, 91),
labels = c('21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90'))),
loan_application_code_month = ifelse(length(month(dat$loan_application_date)) == 1,
paste0(year(dat$loan_application_date), 0, month(dat$loan_application_date)),
paste0(year(dat$loan_application_date), month(dat$loan_application_date))),
loan_disbursement_code_month = ifelse(length(month(dat$loan_disbursement_date)) == 1,
paste0(year(dat$loan_disbursement_date), 0, month(dat$loan_disbursement_date)),
paste0(year(dat$loan_disbursement_date), month(dat$loan_disbursement_date))))
View(dat)
length(10)
length(9)
#Create month variable to better bin the data for month-to-month analysis.
#We'll also calculate the age and bin them in groups of ten years.
dat <- dat %>% mutate(age = as.numeric((Sys.Date() - as.Date(person_birthdate))/365),
age_bins = as.character(cut(age, breaks = c(21, 31, 41, 51, 61, 71, 81, 91),
labels = c('21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90'))),
loan_application_code_month = ifelse(month(dat$loan_application_date) < 10,
paste0(year(dat$loan_application_date), 0, month(dat$loan_application_date)),
paste0(year(dat$loan_application_date), month(dat$loan_application_date))),
loan_disbursement_code_month = ifelse(month(dat$loan_disbursement_date) < 10,
paste0(year(dat$loan_disbursement_date), 0, month(dat$loan_disbursement_date)),
paste0(year(dat$loan_disbursement_date), month(dat$loan_disbursement_date))))
#Demographic distributions
ggplot(dat, aes(loan_application_code_month,
fill = as.factor(person_gender))) + geom_bar(position = 'stack')
#Demographic distributions
ggplot(dat, aes(loan_application_code_month, fill = as.factor(person_gender))) +
geom_bar(position = 'stack') +
labs(x = 'YearMonth', y = 'Number of Applications', label = 'Gender') +
ggtitle(main = 'Applications per Month', subtitle = 'Aug 2017 - Jan 2018')
#Demographic distributions
ggplot(dat, aes(loan_application_code_month, fill = as.factor(person_gender))) +
geom_bar(position = 'stack') +
labs(x = 'YearMonth', y = 'Number of Applications', label = 'Gender') +
ggtitle('Applications per Month', subtitle = 'Aug 2017 - Jan 2018')
#Demographic distributions
ggplot(dat, aes(loan_application_code_month, fill = as.factor(person_gender))) +
geom_bar(position = 'stack') +
labs(x = 'YearMonth', y = 'Number of Applications', fill = 'Gender') +
ggtitle('Applications per Month', subtitle = 'Aug 2017 - Jan 2018')
#Demographic distributions
ggplot(dat, aes(loan_application_code_month, fill = as.factor(person_gender))) +
geom_bar(position = 'stack') +
labs(x = 'YearMonth', y = 'Number of Applications', fill = 'Gender') +
ggtitle('Applications per Month', subtitle = 'Aug 2017 - Jan 2018') +
theme(title = element_text(hjust = 0.5), subtitle = element_text(hjust = 0.5))
?theme
#Demographic distributions
ggplot(dat, aes(loan_application_code_month, fill = as.factor(person_gender))) +
geom_bar(position = 'stack') +
labs(x = 'YearMonth', y = 'Number of Applications', fill = 'Gender') +
ggtitle('Applications per Month', subtitle = 'Aug 2017 - Jan 2018') +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
#Application per month by gender - percentage
ggplot(dat, aes(loan_application_code_month, fill = as.factor(person_gender))) +
geom_bar(position = 'fill') +
labs(x = 'YearMonth', y = 'Number of Applications', fill = 'Gender') +
ggtitle('Applications per Month', subtitle = 'Aug 2017 - Jan 2018') +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
#Application per month by gender - percentage
ggplot(dat, aes(loan_application_code_month, fill = as.factor(person_gender))) +
geom_bar(position = 'fill') +
labs(x = 'YearMonth', y = 'Percentage of Applications', fill = 'Gender') +
ggtitle('Applications per Month', subtitle = 'Aug 2017 - Jan 2018') +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
#Number of Applications per age group
ggplot(dat, aes(age_group)) + geom_bar()
#Number of Applications per age group
ggplot(dat, aes(age_bins)) + geom_bar()
#Application distributions
ggplot(dat, aes(age_bins, fill = 'person_gender')) + geom_density()
#Application distributions
ggplot(dat, aes(age_bins, fill = as.factor(person_gender))) +
geom_density()
#Application distributions
ggplot(dat, aes(age, fill = as.factor(person_gender))) +
geom_density()
#Application distributions
ggplot(dat, aes(age, fill = as.factor(person_gender))) +
geom_density(alpha = 0.3)
#Application distributions
ggplot(dat, aes(age, fill = as.factor(person_gender))) +
geom_density(alpha = 0.3) +
facet_wrap(~ person_gender)
#Application distributions
ggplot(dat, aes(age, fill = as.factor(person_gender))) +
geom_density(alpha = 0.3) +
facet_wrap(~ person_gender, ncol = 1)
#Application distributions
ggplot(dat, aes(age, fill = as.factor(person_gender))) +
geom_density(alpha = 0.3) +
facet_wrap(~ person_gender, ncol = 1) +
labs(x = 'Customer Age', y = 'Density', fill = 'Gender') +
theme(legend.position = 'top', plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
#Application distributions
ggplot(dat, aes(age, fill = as.factor(person_gender))) +
geom_density(alpha = 0.3) +
facet_wrap(~ person_gender, ncol = 1) +
labs(x = 'Customer Age', y = 'Density', fill = 'Gender') +
theme(legend.position = 'bottom', plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
#Application distributions
ggplot(dat, aes(age, fill = as.factor(person_gender))) +
geom_density(alpha = 0.3) +
facet_wrap(~ person_gender, ncol = 1) +
labs(x = 'Customer Age', y = 'Density', fill = 'Gender') +
ggtitle('Age Distribution by Gender') +
theme(legend.position = 'bottom', plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
str(dat)
p_load(readxl, dplyr, ggplot2, tidyr, lubridate, gridExtra)
str(dat)
#
ggplot(dat, aes(person_degree_type_desc)) +
geom_bar() +
coord_flip()
#
ggplot(dat, aes(order(person_degree_type_desc))) +
geom_bar() +
coord_flip()
#
ggplot(dat, aes(person_degree_type_desc)) +
geom_bar() +
coord_flip()
?order
#
ggplot(dat, aes(reorder(person_degree_type_desc))) +
geom_bar() +
coord_flip()
#
ggplot(dat, aes(reorder(person_degree_type_desc, -table(person_degree_type_desc)[person_degree_type_desc]))) +
geom_bar() +
coord_flip()
#
ggplot(dat, aes(reorder(person_degree_type_desc, table(person_degree_type_desc)[person_degree_type_desc]))) +
geom_bar() +
coord_flip()
#
ggplot(dat, aes(reorder(person_degree_type_desc, table(person_degree_type_desc)[person_degree_type_desc]))) +
geom_bar() +
coord_flip() +
labs(x = 'Customer Count', y = 'Degree')
#
ggplot(dat, aes(reorder(person_degree_type_desc, table(person_degree_type_desc)[person_degree_type_desc]))) +
geom_bar() +
coord_flip() +
labs(y = 'Customer Count', x = 'Degree')
str(dat)
ggplot(dat, aes(industry)) + geom_bar() + coord_flip()
ggplot(dat, aes(reorder(industry, table(industry)[industry]))) +
geom_bar() +
coord_flip()
ggplot(dat, aes(reorder(industry, table(industry)[industry]))) +
geom_bar() +
coord_flip() +
labs(x = 'Industry', y = 'Count')
unique(dat$person_employment_type_desc)
unique(dat$person_marital_status)
ggplot(dat, aes(reorder(person_marital_status, table(person_marital_status)[person_marital_status]))) +
geom_bar()
ggplot(dat, aes(reorder(person_marital_status, table(person_marital_status)[person_marital_status]))) +
geom_bar() +
coord_flip() +
labs(x= 'Marital Status', y = 'Count')
ggplot(dat, aes(credit_score)) + geom_histogram()
require(Lahman)
require(dplyr)
require(ggplot2)
bat <- batting
bat <- Batting
??Lahman
install.packages('Lahman')
bat <- Batting
library(Lahman)
library(dplyr)
library(ggplot2)
bat <- Batting
head(bat)
#Loads batting table from Lahman package and filters yearID to 2017
bat <- Batting %>% filter(yearID == 2017)
#Loads batting table from Lahman package, filters yearID to 2017, and creates a new column called BatAvg
bat <- Batting %>%
filter(yearID == 2017) %>%
mutate(BatAvg = round(H/AB, 3))
head(bat)
#Loads batting table from Lahman package, filters yearID to 2016, and creates a new column called BatAvg
bat <- Batting %>%
filter(yearID == 2016) %>%
mutate(BatAvg = round(H/AB, 3))
head(bat)
#Next, will filter down to two teams: the New York Yankees and the Boston Red Sox
bat2 <- bat %>%
filter(teamID %in% c('NYA', 'BOS'))
#Next, will filter down to two teams: the New York Yankees and the Boston Red Sox. We'll also keep batters who had more than 100 ABs
bat2 <- bat %>%
filter(teamID %in% c('NYA', 'BOS') & AB >= 100)
#Let's check the data
str(bat2)
summary(bat2)
head(bat2)
#Now, we'll compare the Batting Average (BatAvg) spread for both teams
ggplot(bat2, aes(x = BatAvg, fill = as.factor(teamID))) + geom_histogram(alpha = 0.3)
#Now, we'll compare the Batting Average (BatAvg) spread for both teams
ggplot(bat2, aes(x = BatAvg, fill = as.factor(teamID))) + geom_histogram(alpha = 0.3) +
labs(x = 'Batting Average', y = 'Count') +
ggtitle('NYA vs BOS Batting Average Spread', subtitle = '2016 Season')
#Now, we'll compare the Batting Average (BatAvg) spread for both teams
ggplot(bat2, aes(x = BatAvg, fill = as.factor(teamID))) + geom_histogram(alpha = 0.3) +
labs(x = 'Batting Average', y = 'Count', fill = 'TeamID') +
ggtitle('NYA vs BOS Batting Average Spread', subtitle = '2016 Season')
#This visual is not very appealing, so we'll create another one based on geom_density
ggplot(bat2, aes(x = BatAvg, fill = as.factor(teamID))) + geom_density(alpha = 0.3) +
labs(x = 'Batting Average', y = 'Count', fill = 'TeamID') +
ggtitle('NYA vs BOS Batting Average Spread', subtitle = '2016 Season')
