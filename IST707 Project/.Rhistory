as.Date(as.character(master$DayZero), format = '%d/%m/%Y')
head(master$DayZero)
as.Date(as.character(master$DayZero), format = '%m/%d/%Y')
master$DayZero <- as.Date(as.character(master$DayZero), format = '%m/%d/%Y')
master$DayNum + master$DayZero
master$gameDay <- master$DayNum + master$DayZero
head(master)
head(season)
require(stringr)
require(tidyr)
head(season)
gather(season, key = Season, value = c(RegionW, RegionX, RegionY, RegionZ))
gather(season, key = Season, value = RegionW)
gather(season, value = Season, key = RegionW)
?gather
gather(season, key = Season, value = Region, c(RegionW, RegionY, RegionX, RegionZ))
head(season)
season
gather(season, key = Season, value = Region, c(RegionW, RegionY, RegionX, RegionZ))
gather(season, key = Season, value = Region, c(RegionW, RegionY, RegionX, RegionZ), -DayZero)
gather(season, key = Season, value = Region, c(RegionW, RegionY, RegionX, RegionZ, -DayZero))
seasonNew <- gather(season, key = Season, value = Region, c(RegionW, RegionY, RegionX, RegionZ))
head(seasonNew)
require(lubridate)
seasonNew %>%
mutate(season = year(DayZero),
seed = substr(Season, 7, 1))
str(seasonNew)
str(seasonNew)
colnames(seasonNew) <- c('DayZero', 'Region', 'Title')
seasonNew$DayZero <- as.Date(as.character(seasonNew$DayZero), '%m/%d/%Y')
seasonNew %>%
mutate(season = year(DayZero),
seed = substr(Season, 7, 1))
seasonNew %>%
mutate(season = year(DayZero),
seed = substr(Region, 7, 1))
str(seasonNew)
seasonNew %>%
mutate(season = year(DayZero),
seed = substr(Region, 6, 1))
seasonNew %>%
mutate(season = year(DayZero),
seed = substring(Region, 7, 1))
seasonNew %>%
mutate(season = year(DayZero),
seed = substring(Region, 6, 7))
seasonNew %>%
mutate(season = year(DayZero),
seed = substr(Region, 7, 7))
seasonNew <- seasonNew %>%
mutate(season = year(DayZero),
seed = substr(Region, 7, 7))
head(seasonNew)
head(master)
head(seasonNew)
tails(seasonNew)
tail(master)
master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='Season', 'WRegion'='seed')) %>% head()
master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>% head()
master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>% tail()
master <- master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed'))
master <- master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
select(-DayZero.y, WRegion, Region) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>% tail()
master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
select(-DayZero.y, WRegion, Region) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>% tail()
master <- regSeasonResults %>% bind_rows(compactResults)
master <- master %>%
left_join(season, by = c('Season' = 'Season')) %>%
select(-RegionW, -RegionX, -RegionY, -RegionZ)
master$DayZero <- as.Date(as.character(master$DayZero), format = '%m/%d/%Y')
master$gameDay <- master$DayNum + master$DayZero
master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
select(-DayZero.y, WRegion, Region) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>% tail()
master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>% tail()
master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>%
select(-DayZero.x, -WRegion, -LRegion, -DayZero.y, -Region.x, -Region.y) %>% tail()
master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>%
select(-DayZero.x, -WRegion, -LRegion, -DayZero.y, -Region.x, -Region.y) %>%
select(Season, DayZero, gameDay, DayNum, WTeamID, WScore, LTeamID, LScore, WLoc, NumOT, gameType,
WTeamSeed, LTeamSeed, WRegion = Title.x, LRegion = Title.y)
master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>%
select(-WRegion, -LRegion, -DayZero.y, -Region.x, -Region.y) %>%
select(Season, DayZero = DayZero.x, gameDay, DayNum, WTeamID, WScore, LTeamID, LScore, WLoc, NumOT, gameType,
WTeamSeed, LTeamSeed, WRegion = Title.x, LRegion = Title.y)
master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>%
select(-DayZero, -DayZero.x, -WRegion, -LRegion, -DayZero.y, -Region.x, -Region.y) %>%
mutate(DayZero = gameDay-DayNum) %>%
select(Season, DayZero = DayZero.x, gameDay, DayNum, WTeamID, WScore, LTeamID, LScore, WLoc, NumOT, gameType,
WTeamSeed, LTeamSeed, WRegion = Title.x, LRegion = Title.y)
master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>%
select(-DayZero, -DayZero.x,-WRegion, -LRegion, -DayZero.y, -Region.x, -Region.y) %>%
mutate(DayZero = gameDay-DayNum) %>%
select(Season, DayZero, gameDay, DayNum, WTeamID, WScore, LTeamID, LScore, WLoc, NumOT, gameType,
WTeamSeed, LTeamSeed, WRegion = Title.x, LRegion = Title.y)
master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>% tail()
master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>% head()
master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>%
select(-DayZero, -WRegion, -LRegion, -DayZero.y, -Region.x, -Region.y) %>%
select(Season, DayZero.x, gameDay, DayNum, WTeamID, WScore, LTeamID, LScore, WLoc, NumOT, gameType,
WTeamSeed, LTeamSeed, WRegion = Title.x, LRegion = Title.y) %>% head()
master <- master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>%
select(-DayZero, -WRegion, -LRegion, -DayZero.y, -Region.x, -Region.y) %>%
select(Season, DayZero.x, gameDay, DayNum, WTeamID, WScore, LTeamID, LScore, WLoc, NumOT, gameType,
WTeamSeed, LTeamSeed, WRegion = Title.x, LRegion = Title.y)
colnames(master)[2] <- 'DayZero'
head(master)
head(master)
# We start by selecting the winning team, their score, and the score of the losing team. These last two will be the points
# scored and points allowed, and will be used to calculate each team's offensive rating (OR) and defensive rating (DR).
homeTeam <- master %>%
select(WTeamID, PointsScored = WScore, PointsAllowed = LScore)
require(dplyr)
# We start by selecting the winning team, their score, and the score of the losing team. These last two will be the points
# scored and points allowed, and will be used to calculate each team's offensive rating (OR) and defensive rating (DR).
homeTeam <- master %>%
select(WTeamID, PointsScored = WScore, PointsAllowed = LScore)
awayTeam <- master %>%
select(LTeamID, PointsScored = LScore, PointsAllowed = WScore)
totalTeam <- homeTeam %>% bind_rows(awayTeam)
# First we'll calculate average points scored and allowed by the league.
totalTeam <- totalTeam %>%
mutate(lgPS = mean(PointsScored), lgPA = mean(PointsAllowed))
head(totalTeam)
# We start by selecting the winning team, their score, and the score of the losing team. These last two will be the points
# scored and points allowed, and will be used to calculate each team's offensive rating (OR) and defensive rating (DR).
homeTeam <- master %>%
select(Season, WTeamID, PointsScored = WScore, PointsAllowed = LScore)
awayTeam <- master %>%
select(Season, LTeamID, PointsScored = LScore, PointsAllowed = WScore)
totalTeam <- homeTeam %>% bind_rows(awayTeam)
# First we'll calculate average points scored and allowed by the league. This needs to be done by season to account for the
# offensive and defensive shifts of all the teams.
totalTeam <- totalTeam %>%
group_by(Season) %>%
mutate(lgPS = mean(PointsScored), lgPA = mean(PointsAllowed))
head(totalTeam)
# We start by selecting the winning team, their score, and the score of the losing team. These last two will be the points
# scored and points allowed, and will be used to calculate each team's offensive rating (OR) and defensive rating (DR).
homeTeam <- master %>%
select(Season, TeamID = WTeamID, PointsScored = WScore, PointsAllowed = LScore)
awayTeam <- master %>%
select(Season, TeamID = LTeamID, PointsScored = LScore, PointsAllowed = WScore)
totalTeam <- homeTeam %>% bind_rows(awayTeam)
# First we'll calculate average points scored and allowed by the league. This needs to be done by season to account for the
# offensive and defensive shifts of all the teams.
totalTeam <- totalTeam %>%
group_by(Season) %>%
mutate(lgPS = mean(PointsScored), lgPA = mean(PointsAllowed))
head(totalTeam)
# We start by selecting the winning team, their score, and the score of the losing team. These last two will be the points
# scored and points allowed, and will be used to calculate each team's offensive rating (OR) and defensive rating (DR).
homeTeam <- master %>%
mutate(gameId = paste0(season, WTeamID, LTeamID)) %>%
select(Season, gameId, TeamID = WTeamID, PointsScored = WScore, PointsAllowed = LScore)
awayTeam <- master %>%
mutate(gameId = paste0(season, WTeamID, LTeamID)) %>%
select(Season, TeamID = LTeamID, PointsScored = LScore, PointsAllowed = WScore)
totalTeam <- homeTeam %>% bind_rows(awayTeam)
totalTeam %>% arrange(gameId)
totalTeam %>% arrange(gameId) %>% head()
# We start by selecting the winning team, their score, and the score of the losing team. These last two will be the points
# scored and points allowed, and will be used to calculate each team's offensive rating (OR) and defensive rating (DR).
homeTeam <- master %>%
mutate(gameId = paste0(Season, WTeamID, LTeamID)) %>%
select(Season, gameId, TeamID = WTeamID, PointsScored = WScore, PointsAllowed = LScore)
awayTeam <- master %>%
mutate(gameId = paste0(Season, WTeamID, LTeamID)) %>%
select(Season, TeamID = LTeamID, PointsScored = LScore, PointsAllowed = WScore)
totalTeam <- homeTeam %>% bind_rows(awayTeam)
totalTeam %>% arrange(gameId) %>% head()
View(totalTeam)
totalTeam %>% filter(gameId == '199831023410')
totalTeam %>% filter(gameId == '1998334103102')
totalTeam %>% filter(TeamID == '3410')
master <- master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>%
select(-DayZero, -WRegion, -LRegion, -DayZero.y, -Region.x, -Region.y) %>%
select(Season, DayZero.x, gameDay, DayNum, WTeamID, WScore, LTeamID, LScore, WLoc, NumOT, gameType,
WTeamSeed, LTeamSeed, WRegion = Title.x, LRegion = Title.y) %>%
mutate(gameId = paste0(Season, '_', WTeamID, '_', LTeamID))
colnames(master)[2] <- 'DayZero'
# We start by selecting the winning team, their score, and the score of the losing team. These last two will be the points
# scored and points allowed, and will be used to calculate each team's offensive rating (OR) and defensive rating (DR).
homeTeam <- master %>%
select(Season, gameId, TeamID = WTeamID, PointsScored = WScore, PointsAllowed = LScore)
awayTeam <- master %>%
select(Season, TeamID = LTeamID, PointsScored = LScore, PointsAllowed = WScore)
totalTeam <- homeTeam %>% bind_rows(awayTeam) %>% arrange(gameId)
head(totalTeam)
master <- master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>%
select(-DayZero, -WRegion, -LRegion, -DayZero.y, -Region.x, -Region.y) %>%
group_by(Season, WTeamID, LTeamID) %>%
mutate(meeting = 1:n()) %>%
ungroup() %>%
mutate(gameId = paste0(Season, '_', WTeamID, '_', LTeamID, '_', meeting)) %>%
select(Season, DayZero.x, gameDay, DayNum, gameId, WTeamID, WScore, LTeamID, LScore, WLoc, NumOT, gameType,
WTeamSeed, LTeamSeed, WRegion = Title.x, LRegion = Title.y)
# Create a master dataset
master <- regSeasonResults %>% bind_rows(compactResults)
master <- master %>%
left_join(season, by = c('Season' = 'Season')) %>%
select(-RegionW, -RegionX, -RegionY, -RegionZ)
master$DayZero <- as.Date(as.character(master$DayZero), format = '%m/%d/%Y')
master$gameDay <- master$DayNum + master$DayZero
master <- master %>%
mutate(WRegion = substr(WTeamSeed, 1, 1),
LRegion = substr(LTeamSeed, 1, 1)) %>%
left_join(seasonNew, by = c('Season'='season', 'WRegion'='seed')) %>%
left_join(seasonNew, by = c('Season'='season', 'LRegion'='seed')) %>%
select(-DayZero, -WRegion, -LRegion, -DayZero.y, -Region.x, -Region.y) %>%
group_by(Season, WTeamID, LTeamID) %>%
mutate(meeting = 1:n()) %>%
ungroup() %>%
mutate(gameId = paste0(Season, '_', WTeamID, '_', LTeamID, '_', meeting)) %>%
select(Season, DayZero.x, gameDay, DayNum, gameId, WTeamID, WScore, LTeamID, LScore, WLoc, NumOT, gameType,
WTeamSeed, LTeamSeed, WRegion = Title.x, LRegion = Title.y)
head(mester)
head(master)
colnames(master)[2] <- 'DayZero'
# We start by selecting the winning team, their score, and the score of the losing team. These last two will be the points
# scored and points allowed, and will be used to calculate each team's offensive rating (OR) and defensive rating (DR).
homeTeam <- master %>%
select(Season, gameId, TeamID = WTeamID, PointsScored = WScore, PointsAllowed = LScore)
awayTeam <- master %>%
select(Season, TeamID = LTeamID, PointsScored = LScore, PointsAllowed = WScore)
totalTeam <- homeTeam %>% bind_rows(awayTeam) %>% arrange(gameId)
head(totalTeam)
totalTeamDedup <- totalTeam[!duplicated(totalTeam), ]
# First we'll calculate average points scored and allowed by the league. This needs to be done by season to account for the
# offensive and defensive shifts of all the teams.
totalTeam <- totalTeam %>%
group_by(Season) %>%
mutate(lgPS = mean(PointsScored), lgPA = mean(PointsAllowed))
# First we'll calculate average points scored and allowed by the league. This needs to be done by season to account for the
# offensive and defensive shifts of all the teams.
totalTeam <- totalTeamDedup %>%
group_by(Season) %>%
mutate(lgPS = mean(PointsScored), lgPA = mean(PointsAllowed))
head(totalTeam)
# We start by selecting the winning team, their score, and the score of the losing team. These last two will be the points
# scored and points allowed, and will be used to calculate each team's offensive rating (OR) and defensive rating (DR).
homeTeam <- master %>%
select(Season, gameId, Team1 = WTeamID, Team2 = LTeamID, PointsScored = WScore, PointsAllowed = LScore)
awayTeam <- master %>%
select(Season, gameId, Team1 = LTeamID, Team2 = LTeamID, PointsScored = LScore, PointsAllowed = WScore)
totalTeam <- homeTeam %>% bind_rows(awayTeam) %>% arrange(gameId)
totalTeamDedup <- totalTeam[!duplicated(totalTeam), ]
# First we'll calculate average points scored and allowed by the league. This needs to be done by season to account for the
# offensive and defensive shifts of all the teams.
totalTeam <- totalTeamDedup %>%
group_by(Season) %>%
mutate(lgPS = mean(PointsScored), lgPA = mean(PointsAllowed))
head(totalTeam)
awayTeam <- master %>%
select(Season, gameId, Team1 = LTeamID, Team2 = WTeamID, PointsScored = LScore, PointsAllowed = WScore)
totalTeam <- homeTeam %>% bind_rows(awayTeam) %>% arrange(gameId)
totalTeamDedup <- totalTeam[!duplicated(totalTeam), ]
# First we'll calculate average points scored and allowed by the league. This needs to be done by season to account for the
# offensive and defensive shifts of all the teams.
totalTeam <- totalTeamDedup %>%
group_by(Season) %>%
mutate(lgPS = mean(PointsScored), lgPA = mean(PointsAllowed))
totalTeamDedup <- totalTeam[!duplicated(totalTeam$gameId), ]
head(totalTeamDedup)
# First we'll calculate average points scored and allowed by the league. This needs to be done by season to account for the
# offensive and defensive shifts of all the teams.
totalTeam <- totalTeamDedup %>%
group_by(Season) %>%
mutate(lgPS = mean(PointsScored), lgPA = mean(PointsAllowed))
head(totalTeam)
# First we'll calculate average points scored and allowed by the league. This needs to be done by season to account for the
# offensive and defensive shifts of all the teams.
totalTeam <- totalTeamDedup %>%
group_by(Season) %>%
mutate(lgPS = mean(PointsScored), lgPA = mean(PointsAllowed)) %>%
ungroup()
# Then, we'll create Team1's OR and DR.
totalTeam %>%
group_by(Season, Team1) %>%
mutate(T1OR = mean(PointsScored)/lgPS,
T1DR = mean(PointsAllowed)/lgPA)
# Then, we'll create Team1's OR and DR...
totalTeam %>%
group_by(Season, Team1) %>%
mutate(T1OR = mean(PointsScored)/lgPS,
T1DR = mean(PointsAllowed)/lgPA) %>%
# ...followed by Team2's OR and DR.
ungroup() %>%
group_by(Season, Team2) %>%
mutate(T2OR = mean(PointsAllowed)/lgPA,
T2DR = mean(PointsScored)/lgPS) %>%
ungroup()
# Then, we'll create Team1's OR, DR and point spread...
totalTeam <- totalTeam %>%
group_by(Season, Team1) %>%
mutate(T1OR = mean(PointsScored)/lgPS,
T1DR = mean(PointsAllowed)/lgPA,
T1PointSpread = mean(PointsScored) - mean(PointsAllowed)) %>%
# ...followed by Team2's OR and DR.
ungroup() %>%
group_by(Season, Team2) %>%
mutate(T2OR = mean(PointsAllowed)/lgPA,
T2DR = mean(PointsScored)/lgPS,
T2PointSpread = mean(PointsAllowed - mean(PointsScored))) %>%
ungroup()
# With each team's OR, DR, and point spread calculated, we'll merge it back into the master file and calculate the expected
# results for each match (what a team should have ideally scored given the other team's neutral stats.)
master %>%
left_join(totalTeam, by = c('Season' = 'Season', 'gameId' = 'gameId'))
# With each team's OR, DR, and point spread calculated, we'll merge it back into the master file and calculate the expected
# results for each match (what a team should have ideally scored given the other team's neutral stats.)
master %>%
left_join(totalTeam, by = c('Season' = 'Season', 'gameId' = 'gameId')) %>% as.data.frame() %>% head()
# With each team's OR, DR, and point spread calculated, we'll merge it back into the master file and calculate the expected
# results for each match (what a team should have ideally scored given the other team's neutral stats.)
master <- master %>%
left_join(totalTeam, by = c('Season' = 'Season', 'gameId' = 'gameId')) %>%
select(Season, gameId, DayZero, gameDay, DayNum, WTeamID, WScore, LTeamID, LScore, WLoc, NumOT, gameType, WTeamSeed,
LTeamSeed, WRegion, LRegion, lgPS, lgPA, WTeamOR = T1OR, WTeamDR = T1DR, WTeamPointSpread = T1PointSpread,
LTeamOR = T2OR, LTeamDR = T2DR, LTeamPointSpread = T2PointSpread) %>%
as.data.frame()
head(master)
master
head(master)
min(master$Season)
max(master$Season)
knitr::opts_chunk$set(echo = TRUE)
# The training set will consist of games played before 2017, while the testing set will contain games played in 2017
trainSet <- master %>%
dplyr::filter(Season >= 2008 & Season < 2017)
require(dplyr)
require(plyr)
require(tidyr)
require(lubridate)
require(ggplot2)
require(caret)
require(randomForest)
# The training set will consist of games played before 2017, while the testing set will contain games played in 2017
trainSet <- master %>%
dplyr::filter(Season >= 2008 & Season < 2017)
testSet <- master %>%
dplyr::filter(Season == 2017)
oob.err <- double(13)
test.err <- double(13)
fit.reg <- lm(WScore ~ LTeamID + LScore + WTeamOR + WTeamDR + LTeamOR + LTeamDR + WTeamPointSpread + LTeamPointSpread, data = trainSet)
summary(fit.reg)
predictLm <- data.frame('predict' = predict(fit.reg, newdata = testSet))
LmResults <- testSet %>%
dplyr::bind_cols(predictLm)
# Plot the results for comparison
ggplot(LmResults, aes(x = WScore, y = predict)) +
geom_point() +
geom_smooth(method = 'lm') +
labs(x = 'Actual Score', y = 'Predicted Score') +
ggtitle('Predicted vs Actual Scores', subtitle = '2017 Season') +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
LmResults
?RMSE
?RMSE
# Root mean squeared error
RMSE(LmResults$predict, LmResults$WScore)
oob.err <- double(13)
test.err <- double(13)
for(mtry in 1:10){
rf <- randomForest(WScore ~ LTeamID + LScore + WTeamOR + WTeamDR + LTeamOR + LTeamDR + WTeamPointSpread + LTeamPointSpread + lgPS + lgPA, data = trainSet, mtry = mtry, ntree = 10)
#Error of all trees
oob.err[mtry] = rf$mse[10]
#Predictions on Test Set for each Tree
pred <- predict(rf, testSet)
test.err[mtry]= with(testSet, mean((WScore - pred)^2))
# Print output
cat(mtry," ")
}
matplot(1:mtry , cbind(oob.err,test.err), pch=19 , col=c("red","blue"),type="b",ylab="Mean Squared Error",xlab="Number of Predictors Considered at each Split")
matplot(1:mtry , cbind(oob.err,test.err), pch=19 , col=c("red","blue"),type="b",ylab="Mean Squared Error",xlab="Number of Predictors Considered at each Split")
oob.err
test.err
oob.err[1:10]
oob.err <- oob.err[1:10]
test.err <- test.err[1:10]
matplot(1:mtry , cbind(oob.err,test.err), pch=19 , col=c("red", "blue"), type="b", ylab = "Mean Squared Error", xlab = "Number of Predictors Considered at each Split")
legend("topright",legend=c("Out of Bag Error","Test Error"),pch=19, col=c("red","blue"))
matplot(1:mtry , cbind(oob.err,test.err), pch=19 , col=c("red", "blue"), type="b", ylab = "Mean Squared Error", xlab = "Number of Predictors Considered at each Split")
legend("topright",legend=c("Out of Bag Error","Test Error"),pch=19, col=c("red","blue"))
rf
summary(rf)
plot(rf)
rfTrain <- randomForest(WScore ~ LTeamID + LScore + WTeamOR + WTeamDR + LTeamOR + LTeamDR + WTeamPointSpread + LTeamPointSpread + lgPS + lgPA, data = trainSet, mtry = 6, ntree = 100)
rfTrain
rfPred <- predict(rfTrain, newdata = testSet)
rfPred <- data.frame('predict' = rfPred)
head(rfPred)
rfResults <- testSet %>% bind_cols(rfPred)
# And now to check the RMSE and the plot
RMSE(rfResults$predict, rfResults$WScore)
ggplot(rfResults, aes(x = WScore, y = predict)) +
geom_point() +
geom_smooth(method = 'lm') +
labs(x = 'Actual Score', y = 'Predicted Score') +
ggtitle('Predicted vs Actual Scores', subtitle = '2017 Season') +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
7.58/7.9
7.9/7.58
?svm
library(e1071)
?svm
svmTrain <- svm(label ~ ., data = trainSet, type = 'eps', kernel = 'linear', cross = 3, probability = TRUE)
svmTrain <- svm(WScore ~ LTeamID + LScore + WTeamOR + WTeamDR + LTeamOR + LTeamDR + WTeamPointSpread + LTeamPointSpread + lgPS + lgPA, data = trainSet, type = 'eps', kernel = 'linear', cross = 3, probability = TRUE)
svmTrain
summary(svmTrain)
svmPred <- predict(svmTrain, newdata = testSet)
svmPred <- data.frame('predict' = svmPred)
svmResults <- testSet %>% bind_cols(svmPred)
svmPred <- predict(svmTrain, newdata = testSet)
svmPred <- predict(svmTrain, newdata = testSet)
svmPred <- data.frame('predict' = svmPred)
svmResults <- testSet %>% bind_cols(svmPred)
svmPred <- predict(svmTrain, newdata = testSet, type = 'prob')
svmPred <- predict(svmTrain, newdata = data.frame(testSet), type = 'prob')
testSet <- data.frame(testSet)
svmPred <- predict(svmTrain, newdata = testSet)
svmPred <- data.frame('predict' = svmPred)
svmResults <- testSet %>% bind_cols(svmPred)
RMSE(svmPred)
testSet2 <- testSet %>% select(LTeamID, LScore, WTeamOR, WTeamDR, LTeamOR, LTeamDR, WTeamPointSpread, LTeamPointSpread, lgPS, lgPA)
svmPred <- predict(svmTrain, newdata = testSet2)
svmPred <- data.frame('predict' = svmPred)
svmResults <- testSet %>% bind_cols(svmPred)
RMSE(svmPred)
RMSE(svmResults$predict, svmResults$WScore)
ggplot(svmResults, aes(x = WScore, y = predict)) +
geom_point() +
geom_smooth(method = 'lm') +
labs(x = 'Actual Score', y = 'Predicted Score') +
ggtitle('Predicted vs Actual Scores', subtitle = '2017 Season') +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
RMSE(svmResults$predict, svmResults$WScore)
